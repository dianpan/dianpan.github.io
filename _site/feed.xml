<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dian Pan</title>
    <description>a fun little blog about learning to code.</description>
    <link>http://dianpan.github.io/</link>
    <atom:link href="http://dianpan.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Jul 2015 22:29:41 -0400</pubDate>
    <lastBuildDate>Sun, 26 Jul 2015 22:29:41 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Syntactically Awesome Style Sheets</title>
        <description>&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg&quot; alt=&quot;Sass&quot; style=&quot;width: 250px; height: 250px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In week 2 of DBC, we were asked to code a website from scratch using HTML and CSS.  That was probably the most frustrating week of my life (&lt;em&gt;dramatic&lt;/em&gt; I know) mostly due to CSS being horribly painful to a new coder. Especially if you’re just mucking around not really knowing how to structure your CSS or what best practices to follow. Now that I’m in week 9, &lt;em&gt;and the last week of Phase 0&lt;/em&gt;, we were asked to refactor our sites using a framework like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; or &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;.  I chose to redo my site pulling in the Jekyll framework.  Why Jekyll is awesome will come in a different blog post, but through Jekyll I came upon a sexy little CSS compiler called &lt;em&gt;Sass&lt;/em&gt;.  Which has helped me remember why I love web design again.&lt;/p&gt;

&lt;h1 id=&quot;what-is-sass-you-ask&quot;&gt;What is Sass you ask?&lt;/h1&gt;
&lt;p&gt;Well, straight from the horse’s mouth, aka &lt;a href=&quot;http://www.hamptoncatlin.com/&quot;&gt;Hampton Catlin&lt;/a&gt;, he says “think of it as mixing rocket fuel with your CSS and strapping it to a skateboard while pushing it down a hill” (&lt;em&gt;and I thought I was dramatic&lt;/em&gt;).  BUT it turns out, after spending all day learning how to use Sass, I am a fan.  It allows you to follow the principles of object oriented programming while compiling your code into vanilla CSS.&lt;/p&gt;

&lt;h1 id=&quot;things-to-love-about-sass&quot;&gt;5 things to love about Sass&lt;/h1&gt;
&lt;p&gt;CSS is a subclass of Sass, meaning just writing CSS means you’re also writing Sass! Of course, Sass lets you do waaay cooler things than plain CSS…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;you can create variables and reuse them across your stylesheets&lt;/li&gt;
  &lt;li&gt;you can use loops to dynamically create fun color palettes  like &lt;a href=&quot;http://codepen.io/ruandre/pen/howFi&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;you can use placeholder classes &lt;code&gt;%placeholder&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;object oriented CSS - &lt;a href=&quot;http://oocss.org/spec/css-mixins.html&quot;&gt;CSS3 mixins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;THE CODE IS SO MUCH EASIER TO MAINTAIN!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I will be adding more…&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w9-sass</link>
        <guid isPermaLink="true">http://dianpan.github.io/w9-sass</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>An Intro to Big O Notation </title>
        <description>&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;http://therecyclebin.files.wordpress.com/2008/05/time-complexity.png&quot; alt=&quot;big o&quot; style=&quot;width: 502px; height: 236px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Big O notation is used to classify algorithms by how their runtime changes relative to the input, as the input grows arbitrarily large. Runtime is defined by time and space complexity.&lt;/p&gt;

&lt;p&gt;Below are some common run times:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O(1): a constant-time method
    &lt;ul&gt;
      &lt;li&gt;the algorithm will always execute in the same time regardless of its input size.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;O(N): a linear-time method
    &lt;ul&gt;
      &lt;li&gt;the algorithm will grow linearly with its input size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;O(N^2): a quadratic-time method
    &lt;ul&gt;
      &lt;li&gt;the algorithm will execute proportional to the square of the size of its input data&lt;/li&gt;
      &lt;li&gt;nested iterations will be O(N^3) or O(N^4)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;O(2^N): exponential-time method
    &lt;ul&gt;
      &lt;li&gt;execution time will double with each additional element in the input data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;O(log N): logarithmic-time method
    &lt;ul&gt;
      &lt;li&gt;I like this example from &lt;a href=&quot;http://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly&quot;&gt;stackoverflow&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Given a person’s name, find the phone number by picking a random point about halfway through the part of the book you haven’t searched yet, then checking to see whether the person’s name is at that point. Then repeat the process about halfway through the part of the book where the person’s name lies. (This is a binary search for a person’s name.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
I’m told that a common interview question involves checking if a number is a part of the Fibonacci sequence.   There are many ways to implement this method, but ideally we’d want to implement Fibonacci in the most efficient way. 3 examples below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write a method to check if a number is a part of the Fibonacci sequence.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Input: a number&lt;/li&gt;
  &lt;li&gt;Output: a method to check if that number is part of the fibonacci sequence arr. Return true or false&lt;/li&gt;
  &lt;li&gt;Fibonacci numbers: [0,1,1,2,3,5,8,13,21,34,55,89,144]&lt;/li&gt;
  &lt;li&gt;each number is the sum of the previous 2&lt;/li&gt;
  &lt;li&gt;start with [0,1] as the first 2 numbers&lt;/li&gt;
  &lt;li&gt;f(n+1) = f(n) + f(n-1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;solution-a&quot;&gt;Solution A&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_fibonacci?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Big O notation:&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution-b&quot;&gt;Solution B&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_fibonacci?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;is_fibonacci?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Big O notation:&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution-c&quot;&gt;Solution C&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Big O notation:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Which implementation is the most efficient?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;Big O Cheat Sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/&quot;&gt;Biginner’s guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Jul 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w8-big-O</link>
        <guid isPermaLink="true">http://dianpan.github.io/w8-big-O</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Ruby vs Javascript</title>
        <description>&lt;p&gt;This week we got our feet wet with Javascript.  I had a little bit of history with JS already, it was the first language I dabbled in, so I have a soft spot for JS. Now that I have a few weeks of Ruby under my belt, it’s a good time to compare the two languages.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby Hashes vs. JavaScript Objects&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby classes vs. JavaScript constructor functions&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 05 Jul 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w7-js</link>
        <guid isPermaLink="true">http://dianpan.github.io/w7-js</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Identifying stereotype threats</title>
        <description>&lt;p&gt;This week we researched the topic of stereotype threat. Per Wikipedia:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Stereotype threat is a situational predicament in which people are or feel themselves to be at risk of confirming negative stereotypes about their social group.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I’m sure everyone has felt stereotype threat from time to time. For example, I’m Chinese, my parents are first generation immigrants. They have strong accents, cook traditional Chinese food and don’t behave like American parents. Growing up, I tried desperately to blend in with my classmates. I think Asians suffer from the “model minority” steryotype:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A model minority is a minority group (whether based on ethnicity, race or religion) whose members are most often perceived to achieve a higher degree of socioeconomic success than the population average. This success is typically measured in income, education, low crime rates and high family stability. The term is highly controversial, for it is sometimes used to suggest there is no need for government action to reduce discrimination.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Growing up, I found subtle expectations everywhere pushing me to conform to those model minority steryotypes. For example, there is this belief that Asians are good at math. My parents were great at math, but me… not so much. They didn’t understand why I wasn’t good at math and I questioned it too. Ultimately, concluding that just maybe it’s because I’m not that smart. So imagine if you will, not fitting into you’re own steryotype, that led to some weird identity issues.&lt;/p&gt;

&lt;p&gt;To be clear, I don’t think I’m bad at math, I was just way more interested in things like music, reading and writing. But I do think growing up with those fixed beliefs kept me away from STEM majors in college. Which is why, it’s pretty [ironic, funny, awesome] that I am now leaving my nice Marketing gig to pursue code. I think that act in of itself is breaking down some of my own stereotype threats. I’m looking forward to continuing this story once I finish DBC and start a new career in web development!&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 18:08:40 -0400</pubDate>
        <link>http://dianpan.github.io/w6-identifying-stereotype-threats</link>
        <guid isPermaLink="true">http://dianpan.github.io/w6-identifying-stereotype-threats</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Object Oriented Programming</title>
        <description>&lt;p&gt;S.O.L.I.D is an acronym for the first five object-oriented design(OOD) principles by Robert C. Martin, popularly known as Uncle Bob.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w6-object-oriented-programming</link>
        <guid isPermaLink="true">http://dianpan.github.io/w6-object-oriented-programming</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Ruby Classes</title>
        <description>&lt;p&gt;Handy little cheat sheet on Ruby classes vs modules, courtesy of
&lt;a href=&quot;http://stackoverflow.com/questions/151505/difference-between-a-class-and-a-module&quot;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;../imgs/ruby-class-vs-module.png&quot; alt=&quot;ruby class vs module&quot; style=&quot;width: 464px; height: 392px;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Jun 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w5-ruby-classes</link>
        <guid isPermaLink="true">http://dianpan.github.io/w5-ruby-classes</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>My Thinking Style</title>
        <description>&lt;p&gt;Going through an intensive bootcamp where the pressure to absorb as much information as possible is high and time is low, it’s important to understand the best way I learn so that I can adapt appropriately.&lt;/p&gt;

&lt;p&gt;I took Anthony Gregorc’s &lt;a href=&quot;&amp;quot;http://www.thelearningweb.net/personalthink.html&amp;quot;&quot;&gt;quiz&lt;/a&gt; to learn about my learning style.&lt;/p&gt;

&lt;p&gt;Here’s a short explanation of each thinking styles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Concrete sequential thinkers are based in reality, according to SuperCamp co-founder and president
Bobbi DePorter. They process information in an ordered, sequential, linear way. To them, “reality consists of what they can detect through their physical sense of sight, touch, sound, taste and smell. They notice and
recall details easily and remember facts specific information, formulas and rules with ease. ‘Hands on’ is a
good way for these people to learn.” If you’re concrete sequential—a CS—build on your organisational
strengths. Provide yourself with details. Break your projects down into specific steps. Set up quiet work
environments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Concrete random thinkers are experimenters. says DePorter: “Like concrete sequentials, they’re based in
reality, but are willing to take more of a trial-and-error approach. Because of this, they often make the
intuitive leaps necessary for true creative thought. They have a strong need to find alternatives and do things
in their own way.” If you’re a CR, use your divergent thinking ability. Believe that it’s good to see things from
more than one viewpoint. Put yourself in a position to solve problems. But give yourself deadlines. Accept
your need for change. Try and work with people who value divergent thinking.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Abstract random thinkers organise information through reflection, and thrive in unstructured,
people-oriented environments. Says DePorter: “The ‘real’ world for abstract random learners is the world of
feelings and emotions. The AR’s mind absorbs ideas, information and impressions and organises them
through reflection. They remember best if information is personalised. They feel constricted when they’re
subjected to a very structured environment.” If you’re an AR, use your natural ability to work with others.
Recognise how strongly emotions influence your concentration. Build on your strength of learning by
association. Look at the big picture first. Be careful to allow enough time to finish the job. Remind yourself to
do things through plenty of visual clues, such as coloured stickers pasted up where you’ll see them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstract sequential thinkers love the world of theory and abstract thought. They like to think in concepts
and analyse information. They make great philosophers and research scientists. DePorter again: “It’s easy
for them to zoom in on what’s important, such as key points and significant details. Their thinking processes
are logical, rational and intellectual. A favourite activity for abstract sequentials is reading, and when a
project needs to be researched they are very thorough at it. Generally they prefer to work alone rather than
in groups.” If you’re an AS, give yourself exercises in logic. Feed your intellect. Steer yourself toward highly
structured situations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;My Results:&lt;/strong&gt;
I lean heavily towards a &lt;em&gt;Concrete Random&lt;/em&gt; thinker, followed closely by &lt;em&gt;Abstract Random&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This makes sense, why I’m natually attracted to methodical people, because I lack that intuition.  Why I’ve gotten a lot of feedback when I first started coding, that I was “all over the place.”&lt;/p&gt;

&lt;p&gt;I care deeply about doing, hacking, producing results, getting shit done.&lt;/p&gt;

&lt;p&gt;BUT I despise working on things that I have no emotional attachment to. For example, our solo coding projects involved implementing BINGO boards and win logic. I’m pretty sure I didn’t even play BINGO growing up and I had no interest whatsoever in creating that game.  On the other hand, I dedicated myself fully in group projects with my Accountability Group, and poured hours refactoring my website, first to make it mobile responsive and second to implement the Jekyll framework.&lt;/p&gt;

&lt;p&gt;My challenge going into Phase 1, is finding a way to attach passion and emotion to projects that I initally find boring.  I think working with other people in a group setting will inspire more interest than working remotely in Phase 0.&lt;/p&gt;

&lt;p&gt;Reference:
&lt;a href=&quot;https://aae.boisestate.edu/wp-content/uploads/2013/03/Anthony-Gregorc-4-Mind-Styles.pdf&quot;&gt;4 thinking styles&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w4-thinking-style</link>
        <guid isPermaLink="true">http://dianpan.github.io/w4-thinking-style</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Ruby Enumerable Methods</title>
        <description>
</description>
        <pubDate>Sun, 07 Jun 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/ruby-enumerable-methods</link>
        <guid isPermaLink="true">http://dianpan.github.io/ruby-enumerable-methods</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Introducing Ruby</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://www.unixstickers.com/image/cache/data/stickers/ruby/ruby.sh-600x600.png&quot; alt=&quot;ruby&quot; style=&quot;width: 150px; height: 150px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ruby was released in 1995 by Yukihiro Matsumoto
Inspired by Perl, Smalltalk, Eiffel, Ada&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w3-ruby-fundamentals</link>
        <guid isPermaLink="true">http://dianpan.github.io/w3-ruby-fundamentals</guid>
        
        
        <category>phase0</category>
        
      </item>
    
      <item>
        <title>Ruby data structures: arrays and hashes</title>
        <description>&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;
&lt;p&gt;Creating arrays
Sorting and comparison
Iteration&lt;/p&gt;

&lt;h1 id=&quot;hashes&quot;&gt;Hashes&lt;/h1&gt;
</description>
        <pubDate>Sun, 31 May 2015 20:00:00 -0400</pubDate>
        <link>http://dianpan.github.io/w3-ruby-data-structures</link>
        <guid isPermaLink="true">http://dianpan.github.io/w3-ruby-data-structures</guid>
        
        
        <category>phase0</category>
        
      </item>
    
  </channel>
</rss>
